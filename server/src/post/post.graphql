scalar Upload

enum GetPostsActionType {
  friends
  all
  owner
}

enum ReactionEntities {
  Like
  Share
  Comment
}

type Like {
  id: Int!
  updatedAt: Date!
  owner: User!
  ownerId: Int!
  post: Post!
  checked: Boolean!
}

type Share {
  id: Int!
  updatedAt: Date!
  owner: User!
  ownerId: Int!
  post: Post!
  checked: Boolean!
}

type Post {
  id: Int!
  description: String!
  image: String
  updatedAt: Date!
  owner: User!
  likes: [Like!]
  shares: [Share!]
  comments: [Comment!]
}

input CreatePostInput {
  description: String!
  file: Upload
}

input UpdateReactionInput {
  id: Int!
  type: ReactionEntities!
  checked: Boolean!
}

input UpdatePostInput {
  id: Int!
  description: String
  file: Upload
}

input PaginationPostsInput {
  action: GetPostsActionType
  ownerId: Int!
  take: Int = 3
  activePage: Int = 1
}

type PaginatedPostsResponse {
  items: [Post!]!
  totalCount: Int!
  hasMore: Boolean!
}

type Query {
  posts(paginationPostsInput: PaginationPostsInput): PaginatedPostsResponse!
  post(id: Int!): Post
}

type Mutation {
  createPost(createPostInput: CreatePostInput!): Post!
  updatePost(updatePostInput: UpdatePostInput!): Post!
  updateReaction(updateReactionInput: UpdateReactionInput!): Boolean!
  removePost(id: Int!): Boolean!
  createLike(postId: Int!): Like!
  createShare(postId: Int!): Share!
  removeLike(id: Int!): Boolean!
  removeShare(id: Int!): Boolean!
}

enum PostMutationType {
  LIKE_CREATED
  LIKE_DELETED
  SHARE_CREATED
  SHARE_DELETED
  COMMENT_CREATED
  COMMENT_DELETED
}

union PostMutatedNode = Like | Share | Comment

type PostMutatedPayload {
  mutation: PostMutationType!
  node: PostMutatedNode!
}

type Subscription {
  postMutated(userId: Int!): PostMutatedPayload!
}

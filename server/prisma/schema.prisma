// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int               @id @default(autoincrement())
  email             String            @unique
  password          String
  firstName         String
  secondName        String
  bio               String?
  avatar            String?
  location          String?
  phone             String?
  username          String            @unique
  isEmailConfirmed  Boolean           @default(false)
  lastSeen          DateTime          @default(now())
  posts             Post[]
  userFriends       Friends[]         @relation(name: "user")
  friendUserFriends Friends[]         @relation(name: "friend_users")
  messages          Message[]
  Like              Like[]
  Share             Share[]
  Comment           Comment[]
  RoomParticipant   RoomParticipant[]
}

model Post {
  id          Int       @id @default(autoincrement())
  image       String?
  description String
  updatedAt   DateTime  @updatedAt
  owner       User      @relation(fields: [ownerId], references: [id])
  ownerId     Int
  likes       Like[]
  shares      Share[]
  comments    Comment[]
}

model Like {
  id        Int      @id @default(autoincrement())
  updatedAt DateTime @updatedAt
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId    Int
  owner     User     @relation(fields: [ownerId], references: [id])
  ownerId   Int
  checked   Boolean  @default(false)
}

model Share {
  id        Int      @id @default(autoincrement())
  updatedAt DateTime @updatedAt
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId    Int
  owner     User     @relation(fields: [ownerId], references: [id])
  ownerId   Int
  checked   Boolean  @default(false)
}

model Comment {
  id        Int      @id @default(autoincrement())
  text      String   @db.VarChar(30)
  updatedAt DateTime @updatedAt
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId    Int
  owner     User     @relation(fields: [ownerId], references: [id])
  ownerId   Int
  checked   Boolean  @default(false)
}

model Friends {
  id            Int      @id @default(autoincrement())
  user_id       Int
  friend_id     Int
  user          User     @relation(name: "user", fields: [user_id], references: [id])
  friend        User     @relation(name: "friend_users", fields: [friend_id], references: [id])
  status        Status   @default(PENDING)
  updatedAt     DateTime @updatedAt
  attemptsCount Int      @default(1)

  @@unique([user_id, friend_id])
}

model Room {
  id           Int               @id @default(autoincrement())
  updatedAt    DateTime          @updatedAt
  messages     Message[]
  participants RoomParticipant[]
}

model RoomParticipant {
  id        Int      @id @default(autoincrement())
  updatedAt DateTime @updatedAt
  room      Room     @relation(fields: [roomId], references: [id])
  roomId    Int
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int?
}

model Message {
  id        Int      @id @default(autoincrement())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
  updatedAt DateTime @updatedAt
  text      String
  room      Room     @relation(fields: [roomId], references: [id])
  roomId    Int
}

enum Status {
  CONFIRMED
  PENDING
  REJECTED
  BLOCKED
}
